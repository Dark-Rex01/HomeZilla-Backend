// <auto-generated />
using System;
using Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeZillaBackend.Migrations
{
    [DbContext(typeof(HomezillaContext))]
    [Migration("20221221070500_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserID")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Final.Entities.Authentication", b =>
                {
                    b.Property<Guid>("AuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthId");

                    b.ToTable("Authentication");
                });

            modelBuilder.Entity("Final.Entities.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceName")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("customerDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("providerDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("customerDetailsId");

                    b.HasIndex("providerDetailsId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Final.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProviderUserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProviderUserID")
                        .IsUnique();

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Final.Entities.ProviderServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Service")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProviderServices");
                });

            modelBuilder.Entity("ProviderProviderServices", b =>
                {
                    b.Property<Guid>("ProviderIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProviderIdId", "ServiceIdId");

                    b.HasIndex("ServiceIdId");

                    b.ToTable("ProviderProviderServices");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.HasOne("Final.Entities.Authentication", "customer")
                        .WithOne("Customer")
                        .HasForeignKey("Customer", "CustomerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Final.Entities.OrderDetails", b =>
                {
                    b.HasOne("Customer", "customerDetails")
                        .WithMany()
                        .HasForeignKey("customerDetailsId");

                    b.HasOne("Final.Entities.Provider", "providerDetails")
                        .WithMany()
                        .HasForeignKey("providerDetailsId");

                    b.Navigation("customerDetails");

                    b.Navigation("providerDetails");
                });

            modelBuilder.Entity("Final.Entities.Provider", b =>
                {
                    b.HasOne("Final.Entities.Authentication", "provider")
                        .WithOne("Provider")
                        .HasForeignKey("Final.Entities.Provider", "ProviderUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("provider");
                });

            modelBuilder.Entity("ProviderProviderServices", b =>
                {
                    b.HasOne("Final.Entities.Provider", null)
                        .WithMany()
                        .HasForeignKey("ProviderIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Entities.ProviderServices", null)
                        .WithMany()
                        .HasForeignKey("ServiceIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final.Entities.Authentication", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Provider");
                });
#pragma warning restore 612, 618
        }
    }
}
